using Microsoft.Extensions.Configuration;
using SHIM.Server.Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Reflection.PortableExecutable;
using System.Threading.Tasks;
namespace SHIM.Server.Services
{
    public class PeminjamService : IPeminjamService
    {
        private readonly IConfiguration _config;
        private readonly IConnectionService _connectionService;

        public PeminjamService(IConfiguration configuration, IConnectionService connectionService)
        {
            _config = configuration;
            _connectionService = connectionService;
        }

        private void AddParameter(DbCommand command, string name, object value, DbType? dbType = null)
        {
            var parameter = command.CreateParameter();
            parameter.ParameterName = name;
            parameter.Value = value ?? DBNull.Value; // Handle null values appropriately
            if (dbType.HasValue)
            {
                parameter.DbType = dbType.Value;
            }
            command.Parameters.Add(parameter);
        }
        public async Task AddPeminjamAsync(Peminjam peminjam)
        {
            if (peminjam == null)
            {
                throw new ArgumentNullException(nameof(peminjam));
            }

            // Business rule: email must contain "pradita"
            if (string.IsNullOrWhiteSpace(peminjam.Email) || !peminjam.Email.ToLower().Contains("pradita"))
            {
                throw new ArgumentException("Email must contain 'pradita'.", nameof(peminjam.Email));
            }

            await using DbConnection connection = await _connectionService.GetDBConnectionAsync();
            await connection.OpenAsync();

            // Assuming id_Peminjam is auto-generated by the database
            string query = "INSERT INTO Peminjam (Nama_Peminjam, Email, No_Telp, Alamat) VALUES (@Nama_Peminjam, @Email, @No_Telp, @Alamat)";

            await using DbCommand command = connection.CreateCommand();
            command.CommandText = query;

            AddParameter(command, "@Nama_Peminjam", peminjam.Nama_Peminjam);
            AddParameter(command, "@Email", peminjam.Email);
            AddParameter(command, "@No_Telp", peminjam.No_Telp);
            AddParameter(command, "@Alamat", peminjam.Alamat);

            try
            {
                await command.ExecuteNonQueryAsync();
            }
            catch (DbException ex)
            {
                // Log exception (ex)
                throw new Exception("An error occurred while adding the Peminjam.", ex);
            }
        }


        public async Task DeletePeminjamAsync(int id_Peminjam)
        {
            await using DbConnection connection = await _connectionService.GetDBConnectionAsync();
            await connection.OpenAsync();

            string query = "DELETE FROM Peminjam WHERE id_peminjam = @id_Peminjam";

            await using DbCommand command = connection.CreateCommand();
            command.CommandText = query;

            AddParameter(command, "@id_Peminjam", id_Peminjam, DbType.Int32);

        }

        public async Task<Peminjam> GetPeminjamByidAsync(int id_Peminjam)
        {
            await using DbConnection connection = await _connectionService.GetDBConnectionAsync();
            await connection.OpenAsync();

            string query = "SELECT id_Peminjam, Nama_Peminjam, Email, No_Telp, Alamat FROM Peminjam WHERE id_Peminjam = @id_Peminjam";

            await using DbCommand command = connection.CreateCommand();
            command.CommandText = query;

            AddParameter(command, "@id_Peminjam", id_Peminjam, DbType.Int32);
            await using DbDataReader dataReader = await command.ExecuteReaderAsync();
            if (await dataReader.ReadAsync()) // Check if any row was returned
            {
                return new Peminjam
                {
                    id_Peminjam = dataReader.GetInt32(dataReader.GetOrdinal("id_Peminjam")),
                    Nama_Peminjam = dataReader.GetString(dataReader.GetOrdinal("Nama_Peminjam")),
                    Email = dataReader.GetString(dataReader.GetOrdinal("Email")),
                    No_Telp = dataReader.GetString(dataReader.GetOrdinal("No_Telp")),
                    Alamat = dataReader.GetString(dataReader.GetOrdinal("Alamat"))
                };
            }
            else
            {
                return null; // Peminjam not found
            }
        }

        public async Task<IEnumerable<Peminjam>> GetPeminjamListAsync()
        {
            var peminjamList = new List<Peminjam>();
            await using DbConnection connection = await _connectionService.GetDBConnectionAsync();
            await connection.OpenAsync();

            string query = "select * from Peminjam";
            await using DbCommand command = connection.CreateCommand();
            command.CommandText = query;

            await using DbDataReader dataReader = await command.ExecuteReaderAsync();
            while (await dataReader.ReadAsync())
            {
                var peminjam = new Peminjam
                {
                    id_Peminjam = dataReader.GetInt32(dataReader.GetOrdinal("id_Peminjam")),
                    Nama_Peminjam = dataReader.GetString(dataReader.GetOrdinal("Nama_Peminjam")),
                    Email = dataReader.GetString(dataReader.GetOrdinal("Email")),
                    No_Telp = dataReader.GetString(dataReader.GetOrdinal("No_Telp")),
                    Alamat = dataReader.GetString(dataReader.GetOrdinal("Alamat"))
                };
                peminjamList.Add(peminjam);
            }

            return peminjamList;
        }

        public async Task UpdatePeminjamAsync(Peminjam peminjam)
        {
            await using DbConnection connection = await _connectionService.GetDBConnectionAsync();
            await connection.OpenAsync();

            string query = @"UPDATE Peminjam 
                             SET Nama_Peminjam = @Nama_Peminjam, 
                                 Email = @Email, 
                                 No_Telp = @No_Telp, 
                                 Alamat = @Alamat 
                             WHERE id_Peminjam = @id_Peminjam";

            await using DbCommand command = connection.CreateCommand();
            command.CommandText = query;

            AddParameter(command, "@Nama_Peminjam", peminjam.Nama_Peminjam, DbType.String);
            AddParameter(command, "@Email", peminjam.Email, DbType.String);
            AddParameter(command, "@No_Telp", peminjam.No_Telp, DbType.String);
            AddParameter(command, "@Alamat", peminjam.Alamat, DbType.String);
            AddParameter(command, "@id_Peminjam", peminjam.id_Peminjam, DbType.Int32);

        }
    }
}
    